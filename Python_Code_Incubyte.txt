#=============================================================================================================
#Step1: read the data from the input file and removing all the unwanted spaces and crated the stage table
#=============================================================================================================
import pandas as pd
from datetime import datetime

file_path = 'Sample_data.txt.txt'
data_rows = []

with open(file_path, 'r') as file:
    for line in file:
        if line.startswith('|D|'):
            line = line.strip()
            parts = line.split('|')[1:]
            data_rows.append(parts)


columns = ['Sl.No','Customer_Name', 'Customer_Id', 'Open_Date', 'Last_Consulted_Date', 'Vaccination_Id',
           'Doctor_Consulted', 'State', 'Country', 'DOB', 'Is_Active']

df = pd.DataFrame(data_rows, columns=columns)

print("Intermediate Staging Table:")
print(df)

#=============================================================================================================
#Step2: derived all required columns as age & last consultation >30 the stage table
#=============================================================================================================

def format_date(date_str, is_dob=False):
    try:
        if is_dob:  # If it's a DOB, expect ddmmyyyy
            return datetime.strptime(date_str, '%d%m%Y')
        else:  # For other dates, expect yyyymmdd
            return datetime.strptime(date_str, '%Y%m%d')
    except ValueError:
        print(f"Invalid date format for: {date_str}")  # Log the invalid date
        return None

df['Open_Date'] = df['Open_Date'].apply(lambda x: format_date(x, is_dob=False))
df['Last_Consulted_Date'] = df['Last_Consulted_Date'].apply(lambda x: format_date(x, is_dob=False))
df['DOB'] = df['DOB'].apply(lambda x: format_date(x, is_dob=True)) 

print("\nDate conversion results:")
print(df[['Open_Date', 'Last_Consulted_Date', 'DOB']])

df['Age'] = (datetime.now() - df['DOB']).dt.days // 365  # Calculate age in years
df['Days_Since_Last_Consultation'] = (datetime.now() - df['Last_Consulted_Date']).dt.days

df['Is_Consulted_Recently'] = df['Days_Since_Last_Consultation'] > 30
print("\nFinal Table with Derived Columns (Age, Days_Since_Last_Consultation):")
print(df[['Customer_Name', 'Customer_Id', 'Open_Date', 'Last_Consulted_Date',
              'Vaccination_Id', 'Doctor_Consulted', 'State', 'Country', 'DOB', 'Is_Active', 
              'Age', 'Days_Since_Last_Consultation', 'Is_Consulted_Recently']])

output_file_path = 'Processed_data.csv' 
df.to_csv(output_file_path, index=False)



#=============================================================================================================
#Step3: segregating the data as per the Country and loaded into files 
#=============================================================================================================
country_dataframes = {}

for country in df['Country'].unique():
    country_df = df[df['Country'] == country]
    if country in country_dataframes:
        country_dataframes[country] = pd.concat([country_dataframes[country], country_df])
    else:
        country_dataframes[country] = country_df

    country_dataframes[country] = country_dataframes[country].sort_values(by='Last_Consulted_Date').drop_duplicates(subset='Customer_Id', keep='last')
	
for country, data in country_dataframes.items():
    # Save to CSV or database table as needed
    country_file_path = f'Processed_data_{country}.csv'
    data.to_csv(country_file_path, index=False)
    print(f"\nProcessed data for {country} has been written to '{country_file_path}' successfully.")